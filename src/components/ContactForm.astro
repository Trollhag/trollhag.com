---
import Input from './shared/Input.astro'
import Checkbox from './shared/Checkbox.astro'
---

<form id="contact-form" class="grid grid-cols-2 gap-4">
  <Input type="text" name="name" label="Namn" color="light" />
  <Input type="text" name="company" label="F√∂retag" color="light" />
  <div class="col-span-2 grid grid-cols-2 gap-x-4">
    <Input type="text" name="phone" label="Telefon" color="light" />
    <Input type="text" name="email" label="Epost" color="light" />
    <Input type="hidden" name="phone-email" color="light" class="col-span-2" />
  </div>
  <Input
    type="textarea"
    name="message"
    label="Meddelande"
    color="light"
    class="col-span-2"
  />
  <div class="col-span-2 flex justify-between">
    <div>
      <Checkbox
        id="contact-form-consent"
        name="consent"
        color="light"
        value="consent"
      >
        Jag har l√§st och godk√§nner <a
          href="/integritetspolicy"
          @click.stop
          class="link decoration-black">integritetspolicyn</a
        >
      </Checkbox>
    </div>
    <button
      type="submit"
      class="button button-small border-button-light hover:button-light"
    >
      Skicka
    </button>
  </div>
</form>

<script>
  import { z } from 'zod'
  import { triggerToast } from '../stores/toasts'
  import { FormInput } from '../utils/form'
  import keybase from '../utils/keybase'

  const ContactFormSchema = {
    name: z.string().min(1, {
      message: 'Fyll i ditt namn s√• jag vet vem som kontaktar mig',
    }),
    company: z.string().optional(),
    phone: z.string().optional(),
    email: z.literal('').or(z.string().email()),
    'phone-email': z.literal(''),
    message: z
      .string()
      .min(1, { message: 'Ber√§tta g√§rna lite om varf√∂r du kontaktar mig' }),
  }
  const ContactFormValidator = z
    .object(ContactFormSchema)
    .superRefine((data, ctx) => {
      console.warn({ data })
      if (!data.phone && !data.email) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message:
            'Telefon eller Epost m√•ste fyllas i s√• jag kan kontakta dig tillbaka',
          path: ['phone-email', 'phone', 'email'],
        })
      }
    })

  const form = document.querySelector<HTMLFormElement>(
    '#contact-form',
  ) as HTMLFormElement
  const fields = {
    name: new FormInput(form, 'name').orUndefined(),
    company: new FormInput(form, 'company').orUndefined(),
    phone: new FormInput(form, 'phone').orUndefined(),
    email: new FormInput(form, 'email').orUndefined(),
    'phone-email': new FormInput(form, 'phone-email').orUndefined(),
    message: new FormInput(form, 'message').orUndefined(),
    consent: new FormInput(form, 'consent').orUndefined(),
  }
  console.log({ fields })
  form.addEventListener('submit', (event) => {
    event.preventDefault()

    const formData: { [k: string]: string } = {}
    for (const [name, field] of Object.entries(fields)) {
      formData[name] = field?.value ?? ''
    }

    console.log({ formData })

    ContactFormValidator.spa(formData).then(({ success, error, data }) => {
      if (!success) {
        console.log(error.errors)
        for (let err of error.errors) {
          err.path.forEach((name) => {
            const field = fields[name as keyof typeof fields]
            field?.setError(err)
          })
        }
      } else {
        // sendMessage("ContactForm", data)
        keybase
          .hello(data)
          .then(() => {
            triggerToast({
              color: 'success',
              title: 'Hurra üéâ',
              message:
                'Ditt meddelande hade skickats utan problem, vi h√∂rs snart!',
            })
          })
          .catch(() => {
            triggerToast({
              color: 'error',
              title: 'Hoppsan ‚ÅâÔ∏è',
              message:
                'Kunde inte skicka in formul√§ret, v√§nligen skicka ett mail ist√§llet!',
            })
          })
      }
    })
  })
</script>
